---
interface JobExperience {
  company: string;
  logo: string;
  website: string; 
  position: string;
  period: string;
  teams: {
    name: string;
    shortName?: string; // 新增短名稱屬性
    responsibilities: string[];
  }[];
  techStack: string;
}

const experiences: JobExperience[] = [
  {
    company: "Advantech Co., Ltd.",
    logo: "/img/jobs/advantech.png",
    website: "https://www.advantech.com/zh-tw",
    position: "IT AI Intern",
    period: "Jun. 2024 - Now",
    teams: [
      {
        name: "ACL COE Data Platform Team",
        responsibilities: [
          "Build AI Agents to solve company classification and recommendation problems",
          "Use GenAI to assist with data labeling and unstructured data processing",
          "Automate data processing workflows"
        ]
      }
    ],
    techStack: "⚙️ Tech stack: Python, Azure(OpenAI, AI Search), Denodo, Postman"
  },
  {
    company: "Merkle Taiwan",
    logo: "/img/jobs/merkle_taiwan.png",
    website: "https://www.merkle.com/zh.html",
    position: "(PT) Data Engineer Intern",
    period: "Aug. 2021 - Jun. 2023",
    teams: [
      {
        name: "Data Science Team",
        responsibilities: [
          "Assist in developing data ETL, automation, and data preprocessing workflows in cloud environments (AWS/GCP)",
          "Help organize and input data into accounting systems",
        ]
      }
    ],
    techStack: "⚙️ Tech stack: Python, AWS(Personalize), GCP(BigQuery, Vertex AI, Workbench, k8s..)"
  },
  {
    company: "amiko AI",
    logo: "/img/jobs/amiko.png",
    website: "https://www.amiko.net",
    position: "AI Data Processing Intern",
    period: "Dec. 2021 - Jul. 2021",
    teams: [
      {
        name: "Research and Development Department",
        shortName: "R&D Department", // 添加短名稱
        responsibilities: [
          "Text Data Processing and Data Annotation",
          "Assist in AI Model Development, Training, and Validation",
          "Market Analysis Report Preparation",
          "Data Visualization and Data Insights",
        ]
      }
    ],
    techStack: "⚙️ Tech stack: Python, Bash, Elastic Search, Kibana, Looker Studio, Prodi.gy"
  }
];
---

<div class="job-experience-container">
  <div class="timeline-container">
    {experiences.map((job, index) => (
      <div class="job-entry relative fade-in-section">
        <!-- 時間軸元素 -->
        <div class="timeline-line"></div>
        <div class="timeline-dot"></div>
        
        <div class="job-content ml-8">
          <!-- 公司標題和logo -->
          <div class="company-header flex items-center mb-4">
            <h2 class="text-xl font-bold text-white">
              <a href={job.website} target="_blank" rel="noopener noreferrer" class="hover:text-primary hover:underline transition-colors">
                {job.company}
              </a>
            </h2>
            <div class="company-logo-container ml-3">
              <img 
                src={job.logo} 
                alt={`${job.company} logo`} 
                class="company-logo w-8 h-8 object-contain bg-white rounded-md p-1"
              />
            </div>
          </div>

          <!-- 工作詳情 -->
          {job.teams.map((team) => (
            <div class="team-section mb-4">
              <div class="text-white mb-2">
                <div class="font-semibold">
                  {team.shortName ? (
                    <>
                      <span class="hidden sm-custom:inline">{team.name}</span>
                      <span class="inline sm-custom:hidden">{team.shortName}</span>
                    </>
                  ) : team.name}
                </div>
                <div class="text-sm text-gray-200 mt-1">
                  <span class="block">{job.position}</span>
                  <span class="block">{job.period}</span>
                </div>
              </div>
              
              <ul class="list-none space-y-2 ml-2">
                {team.responsibilities.map((resp) => (
                  <li class="text-gray-400 flex items-start">
                    <span class="inline-block mr-2">-</span>
                    <span>{resp}</span>
                  </li>
                ))}
              </ul>
            </div>
          ))}
          
          <!-- 技術棧 - 加粗且字體縮小 -->
          <div class="text-gray-200 mt-2 mb-8 text-sm font-semibold">
            {job.techStack}
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .job-experience-container {
    width: 100%;
    position: relative;
  }
  
  .timeline-container {
    position: relative;
  }
  
  .timeline-container::before {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    left: 12px;
    width: 2px;
    background-color: #4B5563; /* 時間軸顏色 */
  }
  
  .job-entry {
    position: relative;
    padding-bottom: 10px;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .job-entry.active {
    opacity: 1;
    transform: translateY(0);
  }
  
  .timeline-dot {
    position: absolute;
    left: 6px;
    top: 10px;
    width: 14px;
    height: 14px;
    border-radius: 50%;
    background-color: #F43F5E; /* 主色 */
    border: 2px solid #111827; /* 背景色 */
    z-index: 1;
  }
  
  .company-logo {
    display: inline-block;
    vertical-align: middle;
  }
  
  .job-content {
    border-bottom: 1px solid #374151;
    padding-bottom: 1rem;
  }
  
  .job-entry:last-child .job-content {
    border-bottom: none;
  }
  
  /* 自定義媒體查詢斷點 */
  @media (min-width: 462px) {
    .sm-custom\:inline {
      display: inline !important;
    }
    .sm-custom\:hidden {
      display: none !important;
    }
  }
  
  @media (max-width: 461px) {
    .hidden.sm-custom\:inline {
      display: none !important;
    }
    .inline.sm-custom\:hidden {
      display: inline !important;
    }
  }
</style>

<script>
  // 當DOM加載完成後執行
  document.addEventListener('DOMContentLoaded', () => {
    // 獲取所有需要檢測的元素
    const sections = document.querySelectorAll('.fade-in-section');
    
    // 創建IntersectionObserver實例
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        // 當元素進入視口
        if (entry.isIntersecting) {
          // 添加active類以觸發動畫
          entry.target.classList.add('active');
          // 一旦顯示就不再觀察它
          observer.unobserve(entry.target);
        }
      });
    }, {
      // 元素20%進入視口時觸發
      threshold: 0.2,
      // 提前100px開始檢測
      rootMargin: '0px 0px -100px 0px'
    });
    
    // 開始觀察每個元素
    sections.forEach(section => {
      observer.observe(section);
    });
  });
</script>