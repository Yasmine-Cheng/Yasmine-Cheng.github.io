---
import { Code } from 'astro:components';

const code = `interface Developer {
    name: string;
    skills: string[];
    interests: string[];
};

interface TechStack {
    aiml: string[];
    cloudService: string[];
    dataTools: string[];
    development: string[];
};

type ContactType = 'github' | 'linkedIn' | 'medium' | 'email';

const techStack: TechStack = {
    aiml: [
        'LLMs & Generative AI',
        'RAG (Retrieval-Augmented Generation)',
        'Embeddings & Vector Databases',
        'Prompt Engineering',
        'Fine-tuning',
        'Transformers',
        'PyTorch',
        'TensorFlow',
    ],
    cloudService: [
        'Cloud Platforms (AWS, GCP, Azure)',
        'ML Service Deployment',
        'Containerization',
        'Serverless Computing'
    ],
    dataTools: [
        'Data Visualization',
        'SQL & NoSQL Databases',
        'Data Analysis',
        'Python Data Stack',
        'BI Tools'
    ],
    development: [
        'Web Development',
        'JavaScript/TypeScript',
        'Frontend Frameworks',
        'REST APIs',
        'Git Version Control'
    ]
};

// Developer profile
const me: Developer = {
    name: 'Yasmine Cheng',
    skills: [
        ...techStack.aiml,
        ...techStack.cloudService,
        ...techStack.dataTools,
        ...techStack.development
    ],
    interests: [
        'Natural Language Processing',
        'Generative Models',
        'Deep Learning',
        'Cloud Computing',
        'Data Engineering',
        'Web Development',
    ]
};

// Contact function
const contact = (type: ContactType): string => {
    switch (type) {
        case 'github':
            return 'https://github.com/Yasmine-Cheng';
        case 'linkedIn':
            return 'https://www.linkedin.com/in/yasminecheng916/';
        case 'medium':
            return 'https://medium.com/@yaszh';
        case 'email':
            return 'mian12080916@gmail.com';
        default:
            return 'Send fax.';
    }
};

`;
---

<Code
    code={code}
    lang="js"
    wrap={true}
/>

<style is:global>

    /* Custom styling for code block line numbers */
    pre.astro-code {
        @apply bg-transparent !important;
    }

    pre.astro-code code {
        @apply block;
        counter-reset: step;
        counter-increment: step 0;
    }

    pre.astro-code code .line {
        @apply relative;
    }

    pre.astro-code code .line::before {
        content: counter(step);
        counter-increment: step;
        @apply text-gray-600 pr-2;
    }

</style>